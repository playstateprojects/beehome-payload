import type { CollectionConfig } from 'payload'
import { slugify } from 'payload/shared'

export const Questionnaire: CollectionConfig = {
  slug: 'questionnaire',
  admin: {
    useAsTitle: 'name',
    defaultColumns: ['name', 'updatedAt'],
    group: 'Content',
  },
  access: {
    read: () => true,
    create: () => true,
    update: () => true,
    delete: () => true,
  },
  fields: [
    {
      name: 'name',
      type: 'text',
      required: true,
      localized: true,
      admin: {
        description: 'This field is used to create the path but is not displayed in the app.',
      },
    },
    {
      name: 'slug',
      type: 'text',
      required: true,
      unique: true,
      admin: {
        readOnly: true,
        description: 'this will be autogenerated based on the title.',
      },
    },
    {
      name: 'note',
      type: 'text',
      localized: false,
      admin: {
        description: 'This field is not displayed in the app.',
      },
    },
    {
      name: 'questionCards',
      type: 'array',
      label: 'Question Cards',
      admin: { description: 'A question card with a list of options.' },
      fields: [
        {
          name: 'title',
          type: 'text',
          localized: true,
        },
        {
          name: 'description',
          type: 'text',
          localized: true,
        },
        {
          name: 'allowMultiple',
          type: 'checkbox',
          defaultValue: true,
          localized: false,
        },
        {
          name: 'options',
          type: 'array',
          label: 'Options',
          fields: [
            {
              name: 'type',
              type: 'select',
              required: true,
              options: [
                { label: 'Checkbox', value: 'checkbox' },
                { label: 'Text', value: 'text' },
                { label: 'Number', value: 'number' },
              ],
              defaultValue: 'checkbox',
            },
            {
              name: 'description',
              type: 'text',
              localized: true,
            },
            {
              name: 'uuid',
              type: 'text',
              required: true,
              defaultValue: () => crypto.randomUUID(),
              admin: {
                readOnly: true,
              },
            },
          ],
        },
      ],
    },
    {
      name: 'endScreens',
      type: 'array',
      label: 'End Screens',
      admin: {
        description:
          'End screens that might be displayed. Add multiple if they react dynamically to the users options. include variables in curly braces for example "Hello {NAME}".',
      },
      fields: [
        {
          name: 'image',
          type: 'upload',
          relationTo: 'media',
          localized: false,
        },
        {
          name: 'title',
          type: 'text',
          required: true,
          localized: true,
        },
        {
          name: 'actionButton',
          type: 'text',
          localized: true,
        },
        {
          name: 'body',
          type: 'richText',
          localized: true,
        },
        {
          name: 'uuid',
          type: 'text',
          required: true,
          defaultValue: () => crypto.randomUUID(),
          admin: {
            readOnly: true,
          },
        },
      ],
    },
  ],
  hooks: {
    beforeValidate: [
      ({ data }) => {
        if (data?.optionGroups) {
          data.optionGroups.forEach((group: Record<string, unknown>) => {
            if (group?.options && Array.isArray(group.options)) {
              group.options.forEach((option: Record<string, unknown>) => {
                if (!option.uuid) {
                  option.uuid = crypto.randomUUID()
                }
              })
            }
          })
        }
        if (data?.endScreens && Array.isArray(data.endScreens)) {
          data.endScreens.forEach((endScreen: Record<string, unknown>) => {
            if (!endScreen.uuid) {
              endScreen.uuid = crypto.randomUUID()
            }
          })
        }
      },

      ({ data, req }) => {
        if (!data) return
        if (!data.slug || String(data.slug).trim() === '') {
          const localization = req.payload.config.localization
          const defaultLocale = localization ? localization.defaultLocale : 'en'
          const title =
            (typeof data.title === 'object' ? data.title?.[defaultLocale] : data.title) || ''
          if (title) data.slug = slugify(title)
        } else {
          data.slug = slugify(String(data.slug))
        }
      },
    ],
  },
}
